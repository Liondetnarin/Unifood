import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Link } from "react-router-dom";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/navigation";
import { Navigation } from "swiper/modules";

function App() {

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    fetch("/api/restaurants")
      .then((res) => res.json())
      .then((data) => {
        console.log("üì¶ data from backend:", data);
        setRestaurants(data);
      })
      .catch((err) => console.error("Error fetching:", err));
  }, []);

  const navigate = useNavigate(); // ‡πÉ‡∏ä‡πâ useNavigate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
  const user = JSON.parse(localStorage.getItem("user")); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage
  const isAdmin = user?.role === "admin"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [restaurants, setRestaurants] = useState([]); // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const [visibleCount, setVisibleCount] = useState(4); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á 4 ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const [searchText, setSearchText] = useState(""); // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const handleSearch = (e) => {
    e.preventDefault();

    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á query ‡∏ß‡πà‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå)
    if (!searchText.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
      return;
    }

    fetch(`http://localhost:8080/api/restaurants/search?keyword=${encodeURIComponent(searchText)}`)
      .then((res) => {
        if (!res.ok) throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
        return res.json();
      })
      .then((data) => {
        console.log("üîç ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", data);
        setRestaurants(Array.isArray(data) ? data : []);
      })
      .catch((err) => {
        console.error("‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
        setRestaurants([]); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô .sort() error
      });
  };


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô Swiper
  const renderSwiperSection = (category, displayName) => {
    const filtered = restaurants.filter((r) => r.category === category);
    const count = filtered.length;

    if (filtered.length === 0) {
      return (
        <div className="max-w-6xl mx-auto">
          <p id={category.toLowerCase()} className="text-2xl sm:text-3xl md:text-4xl font-bold text-center mb-6">
            {displayName}
          </p>
          <p className="text-center text-gray-500 mb-8">
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {displayName}
          </p>
        </div>
      );
    }

    return (

      <div className="max-w-6xl mx-auto">
        <p id={category.toLowerCase()} className="text-2xl sm:text-3xl md:text-4xl font-bold text-center mb-8">{displayName}</p>

        <div className="mb-6">
          {count >= 1 ? (
            <Swiper
              modules={[Navigation]}
              spaceBetween={20}
              navigation
              className=""
              centeredSlides={filtered.length === 1}
              breakpoints={{
                640: { slidesPerView: 2 },
                1024: { slidesPerView: 3 },
              }}
            >
              {filtered.map((r) => (
                <SwiperSlide key={r.id}>
                  <div
                    onClick={() => navigate(`/restaurant/${r.id}`)}
                    className="mx-auto cursor-pointer p-6 border border-gray-300 rounded-2xl shadow-lg hover:shadow-2xl transition duration-300 bg-white mb-8"
                  >
                    {r.image && (
                      <img
                        src={`http://localhost:8080${r.image}`}
                        alt={r.name}
                        className="w-full h-[250px] object-cover rounded-lg mb-4"
                      />
                    )}
                    <h2 className="text-lg font-semibold mb-1">{r.name}</h2>
                    <p className="text-sm text-gray-600 mb-1">{r.category} ¬∑ {r.location}</p>
                    <p className="text-sm mb-2">‚≠ê {r.averageRating} ({r.reviewsCount} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)</p>
                    {renderAdminButtons_FixAndDelete(r.id)}
                  </div>
                </SwiperSlide>
              ))}
            </Swiper>
          ) : (
            <div className="flex justify-center gap-4 flex-wrap">
              {filtered.map((r) => (
                <div
                  key={r.id}
                  onClick={() => navigate(`/restaurant/${r.id}`)}
                  className="w-[300px] cursor-pointer p-6 border border-gray-300 rounded-2xl shadow-lg hover:shadow-2xl transition duration-300 bg-white"
                >
                  {r.image && (
                    <img
                      src={`http://localhost:8080${r.image}`}
                      alt={r.name}
                      className="w-full h-[250px] object-cover rounded-lg mb-4"
                    />
                  )}
                  <h2 className="text-lg font-semibold mb-1">{r.name}</h2>
                  <p className="text-sm text-gray-600 mb-1">{r.category} ¬∑ {r.location}</p>
                  <p className="text-sm mb-2">‚≠ê {r.averageRating} ({r.reviewsCount} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)</p>
                  {renderAdminButtons_FixAndDelete(r.id)}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  };

  // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const renderAdminButtons_FixAndDelete = (id) => {
    if (!isAdmin) return null;

    return (
      <div className="flex gap-2 mt-4">
        <button
          onClick={(e) => {
            e.stopPropagation(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô div ‡∏´‡∏•‡∏±‡∏Å
            navigate(`/admin/edit-restaurant/${id}`);
          }}
          className="bg-yellow-400 text-white px-3 py-1 rounded-lg hover:bg-yellow-500 transition"
        >
          üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        </button>

        <button
          onClick={(e) => {
            e.stopPropagation(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô div ‡∏´‡∏•‡∏±‡∏Å
            handleDelete(id);
          }}
          className="bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600 transition"
        >
          ‚ùå ‡∏•‡∏ö
        </button>
      </div>
    );
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const AdminButtons_Add = (id) => {
    if (!isAdmin) return null;

    return (
      <div
        onClick={() => navigate("/admin/add-restaurant")}
        className="flex justify-center">

        <button className="bg-blue-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-700">
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        </button>
      </div>
    )
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  const AdminButtons_Riview = (id) => {
    if (!isAdmin) return null;

    return (
      <div
        onClick={() => navigate("/admin/reviews")}
        className="flex justify-center">

        <button className="bg-blue-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-700">
          ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        </button>
      </div>
    )
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  const AdminButtons_RestaurantList = (id) => {
    if (!isAdmin) return null;

    return (
      <div
        onClick={() => navigate("/admin/restaurants ")}
        className="flex justify-center">

        <button className="bg-blue-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-700">
          ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        </button>
      </div>
    )
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const handleDelete = async (id) => {
    const confirm = window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ?");
    if (!confirm) return;

    try {
      const res = await fetch(`/api/restaurants/${id}`, {
        method: "DELETE",
      });

      if (res.ok) {
        alert("‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        setRestaurants(restaurants.filter((r) => r.id !== id));
      } else {
        alert("‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (err) {
      console.error("Delete Error:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö");
    }
  };

  return (

    <div className="min-h-screen w-full bg-gray-200 p-6">

      <div>
        <nav className="bg-yellow-400 shadow-md p-4 mb-6 rounded-lg">

          <div className="flex justify-between items-center max-w-8xl mx-auto">

            <div className="flex space-x-4 items-center">

              <Link to="/">
                <span className="text-4xl font-bold text-blue-700">Uni</span>
                <span className="text-4xl font-bold text-red-600">Food</span>
              </Link>

            </div>

            <div className="flex items-center space-x-4">

              <form onSubmit={handleSearch} className="flex items-center space-x-2">

                <input
                  type="text"
                  placeholder="‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ..."
                  value={searchText}
                  onChange={(e) => setSearchText(e.target.value)}
                  className="px-40 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />

                <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 font-bold">
                  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                </button>

              </form>

            </div>

            <div className="flex gap-4 justify-center items-center flex-wrap">

              {isAdmin && AdminButtons_Riview()}

              {isAdmin && AdminButtons_RestaurantList()}

              <Link to="/login">
                <button className="text-gray-700 hover:text-blue-600">Log in</button>
              </Link>

              <Link to="/register">
                <button className="text-gray-700 hover:text-blue-600">Sign up</button>
              </Link>

            </div>

          </div>
        </nav>
      </div>

      <div className="max-w-6xl mx-auto mb-8">

        <div className="flex gap-4 mb-4 justify-center items-center flex-wrap">

          {["Food", "Dessert", "Drink", "Cafe"].map((category) => (
            <button key={category} className="bg-yellow-400 text-white px-4 py-2 rounded-lg shadow-md hover:bg-yellow-500"

              onClick={() => {
                const section = document.getElementById(category.toLowerCase());
                if (section) {
                  section.scrollIntoView({ behavior: "smooth" });
                }
              }}
            >{category}
            </button>

          ))}

          {isAdmin && AdminButtons_Add()}

        </div>
      </div>

      {restaurants.length === 0 ? (

        <p className="text-center text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</p>
      ) : (

        <div className="max-w-6xl mx-auto">

          <h2 id="Recommend For You" className="text-2xl sm:text-3xl md:text-4xl font-bold text-center mb-6">Recommend For You</h2>

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">

            {restaurants
              .sort(() => Math.random() - 0.5) // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
              .slice(0, 4) // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏Ñ‡πà 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              .map((r) => (

                <div
                  key={r.id}
                  onClick={() => navigate(`/restaurant/${r.id}`)}
                  className="cursor-pointer p-6 border border-gray-300 rounded-2xl shadow-lg hover:shadow-2xl transition duration-300 bg-white"
                >
                  {r.image && (
                    <img
                      src={`http://localhost:8080${r.image}`}
                      alt={r.name}
                      className="w-full h-[250px] object-cover rounded-xl mb-4"
                    />
                  )}

                  <h2 className="text-lg font-semibold mb-1">{r.name}</h2>
                  <p className="text-sm text-gray-600 mb-1">{r.category} ¬∑ {r.location}</p>
                  <p className="text-sm mb-2">‚≠ê {r.averageRating} ({r.reviewsCount} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)</p>

                  {renderAdminButtons_FixAndDelete(r.id)}
                </div>

              ))}
          </div>

        </div>

      )}


      {restaurants.length === 0 ? (

        <p className="text-center text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</p>
      ) : (

        <div className="max-w-6xl mx-auto">

          <p id="food" className="text-2xl sm:text-3xl md:text-4xl font-bold text-center mb-6">Food</p>

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">

            {restaurants
              .filter((r) => r.category === "Food") //‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î food
              .slice(0, visibleCount) //‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
              .map((r) => (

                <div
                  key={r.id}
                  onClick={() => navigate(`/restaurant/${r.id}`)}
                  className="cursor-pointer p-6 border border-gray-300 rounded-2xl shadow-lg hover:shadow-2xl transition duration-300 bg-white"
                >

                  {r.image && (
                    <img
                      src={`http://localhost:8080${r.image}`}
                      alt={r.name}
                      className="w-full h-[250px] object-cover rounded-lg mb-4"
                    />
                  )}

                  <h2 className="text-lg font-semibold mb-1">{r.name}</h2>
                  <p className="text-sm text-gray-600">{r.category} ¬∑ {r.location}</p>
                  <p className="text-sm mb-1">‚≠ê {r.averageRating} ({r.reviewsCount} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)</p>

                  {renderAdminButtons_FixAndDelete(r.id)}

                </div>
              ))}
          </div>

          <div className="flex justify-center mt-6 mb-6">

            {restaurants.filter((r) => r.category === "Food").length > 4 && (

              <div className="flex justify-center items-center gap-4">

                {visibleCount < restaurants.filter((r) => r.category === "Food").length ? (

                  <button
                    onClick={() => setVisibleCount((prev) => prev + 4)} // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 4
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
                  >
                    ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                  </button>

                ) : (

                  <button
                    onClick={() => setVisibleCount(4)} // ‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 4
                    className="bg-gray-400 text-white px-4 py-2 rounded-lg hover:bg-gray-500"
                  >
                    ‡∏ã‡πà‡∏≠‡∏ô
                  </button>

                )}
              </div>
            )}

          </div>

          {renderSwiperSection("Dessert", "Dessert")}

          {renderSwiperSection("Drink", "Drink")}

          {renderSwiperSection("Cafe", "Cafe")}

        </div>

      )}

    </div>
  );
}

export default App;